macro(prepend listVar prefix)
   set(${listVar} "")
   foreach(item ${ARGN})
      list(APPEND ${listVar} ${prefix}${item})
   endforeach(item)
endmacro(prepend)

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR
    "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  if (TLOCPP_USE_ASAN)
    set(sanitizer_compile_options -fsanitize=address -fsanitize=undefined -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls)
    set(sanitizer_link_options -fsanitize=address -fsanitize=undefined)
  elseif(TLOCPP_USE_MSAN)
    set(sanitizer_compile_options -fsanitize=memory -fsanitize=undefined -O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls)
    set(sanitizer_link_options -fsanitize=memory -fsanitize=undefined)
  endif()

  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(tlocpp_headers_only_clang_compile_options -Wno-exit-time-destructors -Wno-global-constructors -Wno-padded)
    set(tlocpp_clang_compile_options -Wno-exit-time-destructors)
  endif()
endif()

add_library(tlocpp_headers_only INTERFACE)
target_compile_features(tlocpp_headers_only INTERFACE cxx_std_14)
target_compile_options(tlocpp_headers_only INTERFACE ${tlocpp_headers_only_clang_compile_options} ${sanitizer_compile_options})
target_include_directories(tlocpp_headers_only INTERFACE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(tlocpp_headers_only INTERFACE ${sanitizer_link_options})

set(tlocpp_headers util.hpp darray.hpp ctci.hpp bigint.hpp test.hpp)
set(tlocpp_sources ctci.cpp bigint.cpp test.cpp)
prepend(tlocpp_headers ${PROJECT_SOURCE_DIR}/include/tlo/ ${tlocpp_headers})
add_library(tlocpp STATIC ${tlocpp_headers} ${tlocpp_sources})
set_target_properties(tlocpp PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(tlocpp PUBLIC cxx_std_14)
target_compile_options(tlocpp PRIVATE ${global_compile_options} ${tlocpp_clang_compile_options} PUBLIC ${sanitizer_compile_options} INTERFACE ${tlocpp_headers_only_clang_compile_options})
target_include_directories(tlocpp PUBLIC ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(tlocpp PUBLIC ${sanitizer_link_options})

add_library(tlocpp_testmain STATIC testmain.cpp)
set_target_properties(tlocpp_testmain PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(tlocpp_testmain PUBLIC cxx_std_14)
target_compile_options(tlocpp_testmain PRIVATE ${global_compile_options} PUBLIC ${sanitizer_compile_options})
target_include_directories(tlocpp_testmain PUBLIC ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(tlocpp_testmain PUBLIC ${sanitizer_link_options})
